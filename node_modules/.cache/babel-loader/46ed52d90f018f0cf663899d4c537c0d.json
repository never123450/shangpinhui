{"ast":null,"code":"import _asyncToGenerator from \"/Users/xuwenyan/Downloads/study/vue/shangpinhuishop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _this = this;\n\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\n// 该文件专门用于创建整个应用的路由器\n// 引入vue路由\nimport VueRouter from \"vue-router\";\nimport routers from \"./routers\"; // 重写push和replace\n\nvar originPush = VueRouter.prototype.push;\nvar originReplace = VueRouter.prototype.push;\n\nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, function () {}, function () {});\n  }\n};\n\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    /*call 与 apply 的区别\n        相同点:都可以调用函数一次,都可以篡改函数的上下文一次\n        不同点:call 与 apply 传递参数:call 传递参数用逗号隔开\n        apply方法执行,传递数组\n    */\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, function () {}, function () {});\n  }\n};\n\nimport store from \"@/store\"; //创建并暴露一个路由器\n\nvar router = new VueRouter({\n  routes: routers,\n  // 滚动行为\n  scrollBehavior: function scrollBehavior(to, from, savedPosion) {\n    //返回的这个y=e，代表的滚动条在最上方\n    return {\n      y: 0\n    };\n  }\n}); //全局守卫：前置守卫（在路由跳转之间进行判断）\n\nrouter.beforeEach( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(to, from, next) {\n    var token, name, toPath;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // to and from are both route objects. must call `next`.\n            //获取仓库中的token-----可以确定用户是登录了\n            token = store.state.user.token;\n            name = store.state.user.userInfo.name; //用户登录了\n\n            if (!token) {\n              _context.next = 24;\n              break;\n            }\n\n            if (!(to.path == \"/login\" || to.path == \"/register\")) {\n              _context.next = 7;\n              break;\n            }\n\n            next(\"/home\");\n            _context.next = 22;\n            break;\n\n          case 7:\n            if (!name) {\n              _context.next = 11;\n              break;\n            }\n\n            next();\n            _context.next = 22;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return store.dispatch(\"getUserInfo\");\n\n          case 14:\n            next();\n            _context.next = 22;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](11);\n            _context.next = 21;\n            return store.dispatch(\"logout\");\n\n          case 21:\n            // 回到登录页\n            _this.$router.push(\"/login\");\n\n          case 22:\n            _context.next = 26;\n            break;\n\n          case 24:\n            //未登录：不能去交易相关、不能去支付相关【pay|paysuccess】、不能去个人中心\n            //未登录去上面这些路由-----登录\n            toPath = to.path;\n\n            if (toPath.includes(\"/trade\") || toPath.includes(\"/pay\") || toPath.includes(\"/center\")) {\n              //把未登录的时候向去而没有去成的信息，存储于地址栏中【路由】\n              next(\"/login?redirect=\" + toPath); // console.log(toPath);\n            } else {\n              //去的不是上面这些路由（home|search|shopCart）---放行\n              next();\n            }\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 17]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport default router;","map":{"version":3,"sources":["/Users/xuwenyan/Downloads/study/vue/shangpinhuishop/src/router/index.js"],"names":["VueRouter","routers","originPush","prototype","push","originReplace","location","resolve","reject","call","replace","store","router","routes","scrollBehavior","to","from","savedPosion","y","beforeEach","next","token","state","user","name","userInfo","path","dispatch","$router","toPath","includes"],"mappings":"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","sourcesContent":["// 该文件专门用于创建整个应用的路由器\n// 引入vue路由\nimport VueRouter from \"vue-router\";\nimport routers from \"./routers\";\n// 重写push和replace\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.push;\nVueRouter.prototype.push = function(location, resolve, reject) {\n    if (resolve && reject) {\n        originPush.call(this, location, resolve, reject);\n    } else {\n        originPush.call(\n            this,\n            location,\n            () => {},\n            () => {}\n        );\n    }\n};\nVueRouter.prototype.replace = function(location, resolve, reject) {\n    if (resolve && reject) {\n        /*call 与 apply 的区别\n            相同点:都可以调用函数一次,都可以篡改函数的上下文一次\n            不同点:call 与 apply 传递参数:call 传递参数用逗号隔开\n            apply方法执行,传递数组\n        */\n        originReplace.call(this, location, resolve, reject);\n    } else {\n        originReplace.call(\n            this,\n            location,\n            () => {},\n            () => {}\n        );\n    }\n};\nimport store from \"@/store\";\n//创建并暴露一个路由器\nlet router = new VueRouter({\n    routes: routers,\n    // 滚动行为\n    scrollBehavior(to, from, savedPosion) {\n        //返回的这个y=e，代表的滚动条在最上方\n        return { y: 0 };\n    },\n});\n//全局守卫：前置守卫（在路由跳转之间进行判断）\nrouter.beforeEach(async(to, from, next) => {\n    // to and from are both route objects. must call `next`.\n    //获取仓库中的token-----可以确定用户是登录了\n    let token = store.state.user.token;\n    let name = store.state.user.userInfo.name;\n    //用户登录了\n    if (token) {\n        //已经登录而且还想去登录------不行\n        if (to.path == \"/login\" || to.path == \"/register\") {\n            next(\"/home\");\n        } else {\n            //已经登陆了,访问的是非登录与注册\n            //登录了且拥有用户信息放行\n            if (name) {\n                next();\n            } else {\n                //登陆了且没有用户信息\n                //在路由跳转之前获取用户信息且放行\n                try {\n                    //获取用户信息\n                    await store.dispatch(\"getUserInfo\");\n                    next();\n                } catch (error) {\n                    //token失效从新登录\n                    //清除token\n                    await store.dispatch(\"logout\");\n                    // 回到登录页\n                    this.$router.push(\"/login\");\n                }\n            }\n        }\n    } else {\n        //未登录：不能去交易相关、不能去支付相关【pay|paysuccess】、不能去个人中心\n        //未登录去上面这些路由-----登录\n        let toPath = to.path;\n        if (toPath.includes(\"/trade\") || toPath.includes(\"/pay\") || toPath.includes(\"/center\")) {\n            //把未登录的时候向去而没有去成的信息，存储于地址栏中【路由】\n            next(\"/login?redirect=\" + toPath);\n            // console.log(toPath);\n        } else {\n            //去的不是上面这些路由（home|search|shopCart）---放行\n            next();\n        }\n    }\n});\nexport default router;"]},"metadata":{},"sourceType":"module"}