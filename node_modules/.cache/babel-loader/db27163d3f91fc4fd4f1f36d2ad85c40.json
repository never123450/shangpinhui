{"ast":null,"code":"import _asyncToGenerator from \"/Users/xuwenyan/Downloads/study/vue/shangpinhuishop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqGetCode, reqUserRegister, reqUserLogin as _reqUserLogin, reqUserInfo, reqlogout } from '@/api';\nimport { setToken, getToken, removeToken } from '../utils/token';\nvar state = {\n  code: '',\n  token: getToken(),\n  userInfo: {}\n};\nvar actions = {\n  //获取验证码\n  getCode: function getCode(_ref, phone) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqGetCode(phone);\n\n            case 3:\n              result = _context.sent;\n\n              // console.log(result);\n              if (result.code == 200) {\n                commit('GETCODE', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  //注册\n  userRegister: function userRegister(_ref2, user) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqUserRegister(user);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", 'ok');\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error('faile')));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  //登录业务\n  reqUserLogin: function reqUserLogin(_ref3, user) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return _reqUserLogin(user);\n\n            case 3:\n              result = _context3.sent;\n\n              // console.log(result);\n              //服务器下发token，用户唯一标识符(uuid)\n              //将来经常通过带token找服务器要用户信息进行展示\n              if (result.code === 200) {\n                commit('USERLOGIN', result.data.token);\n                setToken(result.data.token); //持久化存储token\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  //获取用户信息在首页展示【需要带着用户的token向服务器要用户信息】\n  getUserInfo: function getUserInfo(_ref4) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context4.next = 3;\n              return reqUserInfo();\n\n            case 3:\n              result = _context4.sent;\n\n              if (!(result.code == 200)) {\n                _context4.next = 9;\n                break;\n              }\n\n              commit('USERINFO', result.data);\n              return _context4.abrupt(\"return\", 'ok');\n\n            case 9:\n              return _context4.abrupt(\"return\", Promise.reject(new Error('fail')));\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  // 退出登录\n  logout: function logout(_ref5) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              _context5.next = 3;\n              return reqlogout();\n\n            case 3:\n              result = _context5.sent;\n\n              if (!(result.code == 200)) {\n                _context5.next = 8;\n                break;\n              }\n\n              commit('CLEAR', result.data);\n              _context5.next = 9;\n              break;\n\n            case 8:\n              return _context5.abrupt(\"return\", Promise.reject(new Error('falie')));\n\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  }\n};\nvar mutations = {\n  GETCODE: function GETCODE(state, code) {\n    state.code = code;\n  },\n  USERLOGIN: function USERLOGIN(state, token) {\n    state.token = token;\n  },\n  USERINFO: function USERINFO(state, userInfo) {\n    state.userInfo = userInfo;\n  },\n  CLEAR: function CLEAR(state) {\n    //帮仓库中先关用户信息清空\n    state.userInfo = {};\n    state.token = ''; //本地存储数据清空\n\n    removeToken();\n  }\n};\nvar getters = {};\nexport default {\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};","map":{"version":3,"sources":["/Users/xuwenyan/Downloads/study/vue/shangpinhuishop/src/store/user.js"],"names":["reqGetCode","reqUserRegister","reqUserLogin","reqUserInfo","reqlogout","setToken","getToken","removeToken","state","code","token","userInfo","actions","getCode","phone","commit","result","data","userRegister","user","Promise","reject","Error","getUserInfo","logout","mutations","GETCODE","USERLOGIN","USERINFO","CLEAR","getters"],"mappings":"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","sourcesContent":["import { reqGetCode, reqUserRegister, reqUserLogin, reqUserInfo, reqlogout } from '@/api';\nimport { setToken, getToken, removeToken } from '../utils/token';\nconst state = {\n    code: '',\n    token: getToken(),\n    userInfo: {},\n};\nconst actions = {\n    //获取验证码\n    async getCode({ commit }, phone) {\n        let result = await reqGetCode(phone);\n        // console.log(result);\n        if (result.code == 200) {\n            commit('GETCODE', result.data);\n        }\n    },\n    //注册\n    async userRegister({ commit }, user) {\n        let result = await reqUserRegister(user);\n        // console.log(result);\n        if (result.code == 200) {\n            return 'ok';\n        } else {\n            return Promise.reject(new Error('faile'));\n        }\n    },\n    //登录业务\n    async reqUserLogin({ commit }, user) {\n        let result = await reqUserLogin(user);\n        // console.log(result);\n        //服务器下发token，用户唯一标识符(uuid)\n        //将来经常通过带token找服务器要用户信息进行展示\n        if (result.code === 200) {\n            commit('USERLOGIN', result.data.token);\n            setToken(result.data.token); //持久化存储token\n        }\n    },\n    //获取用户信息在首页展示【需要带着用户的token向服务器要用户信息】\n    async getUserInfo({ commit }) {\n        let result = await reqUserInfo();\n        // console.log(result);\n        if (result.code == 200) {\n            commit('USERINFO', result.data);\n            return 'ok';\n        } else {\n            return Promise.reject(new Error('fail'));\n        }\n    },\n    // 退出登录\n    async logout({ commit }) {\n        //只是向服务器发起一次请求，通知服务器清除token\n        let result = await reqlogout();\n        // console.log(result);\n        //action里面不能操作state，提交mutation修改state\n        if (result.code == 200) {\n            commit('CLEAR', result.data);\n        } else {\n            return Promise.reject(new Error('falie'));\n        }\n    },\n};\nconst mutations = {\n    GETCODE(state, code) {\n        state.code = code;\n    },\n    USERLOGIN(state, token) {\n        state.token = token;\n    },\n    USERINFO(state, userInfo) {\n        state.userInfo = userInfo;\n    },\n    CLEAR(state) {\n        //帮仓库中先关用户信息清空\n        state.userInfo = {};\n        state.token = '';\n        //本地存储数据清空\n        removeToken();\n    },\n};\nconst getters = {};\nexport default {\n    state,\n    actions,\n    mutations,\n    getters,\n};"]},"metadata":{},"sourceType":"module"}