{"ast":null,"code":"import _asyncToGenerator from \"/Users/xuwenyan/Downloads/study/vue/shangpinhuishop/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\";\nvar state = {\n  carList: []\n};\nvar mutations = {\n  GETCARTLIST: function GETCARTLIST(state, carList) {\n    state.carList = carList;\n  }\n};\nvar actions = {\n  //获取购物车列表数据\n  getCartList: function getCartList(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCartList();\n\n            case 3:\n              result = _context.sent;\n\n              if (result.code == 200) {\n                commit(\"GETCARTLIST\", result.data); // console.log(result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  //删除购物车某一个产品\n  deleteCartListBySkuId: function deleteCartListBySkuId(_ref2, skuId) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqDeleteCartById(skuId);\n\n            case 3:\n              result = _context2.sent;\n\n              if (!(result.code == 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", \"ok\");\n\n            case 8:\n              return _context2.abrupt(\"return\", Promise.reject(new Error(\"faile\")));\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  //修改购物车某一个产品的选中状态\n  updateCheckedById: function updateCheckedById(_ref3, _ref4) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, skuId, isChecked, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              skuId = _ref4.skuId, isChecked = _ref4.isChecked;\n              _context3.next = 4;\n              return reqUpdateCheckedByid(skuId, isChecked);\n\n            case 4:\n              result = _context3.sent;\n\n              if (!(result.code == 200)) {\n                _context3.next = 9;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", \"ok\");\n\n            case 9:\n              return _context3.abrupt(\"return\", Promise.reject(new Error(\"faile\")));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  //删除全部勾选的产品\n  deleteAllCheckedCart: function deleteAllCheckedCart(_ref5) {\n    var dispatch = _ref5.dispatch,\n        getters = _ref5.getters;\n    //context:小仓库，commit【提交mutations修改state】 getters【计算属性】 dispatch【派发action】 state【当前仓库数据】\n    var PromiseAll = []; //获取购物车中全部的产品（是一个数组）\n\n    getters.carList.cartInfoList.forEach(function (item) {\n      var Promise = item.isChecked == 1 ? dispatch(\"deleteCartListBySkuId\", item.skuId) : \"\"; //将每一次返回的Promise添加到数组当中\n\n      PromiseAll.push(Promise);\n    }); //只要全部的p1|p2....都成功，返回结果即为成功\n    //如果有一个失败，返回即为失败结果\n\n    return Promise.all(PromiseAll);\n  },\n  //修改全部产品的状态\n  updateAllCartChecked: function updateAllCartChecked(_ref6, isChecked) {\n    var dispatch = _ref6.dispatch,\n        state = _ref6.state;\n    //数组\n    var promiseAll = [];\n    state.carList[0].cartInfoList.forEach(function (item) {\n      var promise = dispatch(\"updateCheckedById\", {\n        skuId: item.skuId,\n        isChecked: isChecked\n      });\n      promiseAll.push(promise);\n    }); //最终返回结果\n\n    return Promise.all(promiseAll);\n  }\n};\nvar getters = {\n  carList: function carList(state) {\n    return state.carList[0] || {};\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["/Users/xuwenyan/Downloads/study/vue/shangpinhuishop/src/store/shopcart.js"],"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedByid","state","carList","mutations","GETCARTLIST","actions","getCartList","commit","result","code","data","deleteCartListBySkuId","skuId","Promise","reject","Error","updateCheckedById","isChecked","deleteAllCheckedCart","dispatch","getters","PromiseAll","cartInfoList","forEach","item","push","all","updateAllCartChecked","promiseAll","promise"],"mappings":"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","sourcesContent":["import { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\";\nconst state = {\n    carList: [],\n};\nconst mutations = {\n    GETCARTLIST(state, carList) {\n        state.carList = carList;\n    },\n};\nconst actions = {\n    //获取购物车列表数据\n    async getCartList({ commit }) {\n        let result = await reqCartList();\n        if (result.code == 200) {\n            commit(\"GETCARTLIST\", result.data);\n            // console.log(result.data);\n        }\n    },\n    //删除购物车某一个产品\n    async deleteCartListBySkuId({ commit }, skuId) {\n        let result = await reqDeleteCartById(skuId);\n        if (result.code == 200) {\n            return \"ok\";\n        } else {\n            return Promise.reject(new Error(\"faile\"));\n        }\n    },\n    //修改购物车某一个产品的选中状态\n    async updateCheckedById({ commit }, { skuId, isChecked }) {\n        let result = await reqUpdateCheckedByid(skuId, isChecked);\n        // console.log(result);\n        if (result.code == 200) {\n            return \"ok\";\n        } else {\n            return Promise.reject(new Error(\"faile\"));\n        }\n    },\n    //删除全部勾选的产品\n    deleteAllCheckedCart({ dispatch, getters }) {\n        //context:小仓库，commit【提交mutations修改state】 getters【计算属性】 dispatch【派发action】 state【当前仓库数据】\n        let PromiseAll = [];\n        //获取购物车中全部的产品（是一个数组）\n        getters.carList.cartInfoList.forEach((item) => {\n            let Promise =\n                item.isChecked == 1 ?\n                dispatch(\"deleteCartListBySkuId\", item.skuId) :\n                \"\";\n            //将每一次返回的Promise添加到数组当中\n            PromiseAll.push(Promise);\n        });\n        //只要全部的p1|p2....都成功，返回结果即为成功\n        //如果有一个失败，返回即为失败结果\n        return Promise.all(PromiseAll);\n    },\n    //修改全部产品的状态\n    updateAllCartChecked({ dispatch, state }, isChecked) {\n        //数组\n        let promiseAll = [];\n        state.carList[0].cartInfoList.forEach((item) => {\n            let promise = dispatch(\"updateCheckedById\", {\n                skuId: item.skuId,\n                isChecked,\n            });\n            promiseAll.push(promise);\n        });\n        //最终返回结果\n        return Promise.all(promiseAll);\n    },\n};\nconst getters = {\n    carList(state) {\n        return state.carList[0] || {};\n    },\n};\nexport default {\n    state,\n    mutations,\n    actions,\n    getters,\n};"]},"metadata":{},"sourceType":"module"}